[{"D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\index.js":"1","D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\App.js":"2","D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\reportWebVitals.js":"3","D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\store\\reducer\\reducer.js":"4","D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\Components\\Home.js":"5","D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\Components\\Trash.js":"6","D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\store\\action\\actionTypes.js":"7","D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\Components\\TakeNote.js":"8","D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\store\\action\\actions.js":"9","D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\Components\\archieve.js":"10"},{"size":802,"mtime":1631392273897,"results":"11","hashOfConfig":"12"},{"size":2054,"mtime":1631902467725,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":4697,"mtime":1631898093049,"results":"15","hashOfConfig":"12"},{"size":5681,"mtime":1631902330936,"results":"16","hashOfConfig":"12"},{"size":1256,"mtime":1631393304313,"results":"17","hashOfConfig":"12"},{"size":485,"mtime":1631892813017,"results":"18","hashOfConfig":"12"},{"size":2131,"mtime":1631902875672,"results":"19","hashOfConfig":"12"},{"size":1326,"mtime":1631893561913,"results":"20","hashOfConfig":"12"},{"size":1295,"mtime":1631822590214,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1f0dh4q",{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\index.js",[],"D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\App.js",["45","46"],"import React,{Component} from 'react';\nimport Home from './Components/Home';\nimport noteLogo from './assets/note.png';\nimport delLogo from './assets/del.png';\nimport archLogo from './assets/archive.jpg';\nimport logo from './assets/logo.png';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Trash from './Components/Trash';\nimport Archieve from './Components/archieve';\nimport {connect} from 'react-redux';\nimport  * as actions from './store/action/actions'\n\n\n\nclass App extends Component{\n \n  \n\n  render() {\n   \n    return(\n     \n      <div>\n        <div className=\"header\">\n          <img src={logo} />\n          <h3>Keep</h3>\n          <input onChange={(e)=>{this.props.onSearch(e.target.value)}} className=\"search\" type=\"text\" placeholder=\"Search\" />\n        </div>\n        <hr></hr>\n\n\n        <div className=\"content\">\n          <div className=\"navigation\"> \n\n          <Link to=\"/\" className=\"nav-home\">\n            \n           <img alt=\"home\" className=\"home\" src={noteLogo}/>\n            </Link>\n\n            <Link to=\"/trash\" className=\"nav-trash\">\n              <img alt=\"trash\" className=\"trash\" src={delLogo}/>\n              </Link>\n\n              <Link to=\"/archieve\" className=\"nav-trash\">\n              <img alt=\"archieve\" className=\"trash\" src={archLogo}/>     \n               </Link>\n            \n            </div>\n\n\n\n             \n               <Switch>\n                 <Route   path='/trash' render={(props)=><Trash {...props} />}/>\n                 <Route   path='/archieve' render={(props)=><Archieve {...props} />}/>\n                 \n                 <Route exact path='/' render={(props)=><Home {...props}  styles='flex' />}/>\n               </Switch>\n          \n             \n        </div>\n       </div>\n    );\n  };\n}\n\nconst mapStateToProps=(state)=>{\nreturn{\n  searchResult: state.searchResult\n\n}\n}\nconst mapDispatchToProps=(dispatch)=>{\nreturn{\n  onSearch:  (query)=>dispatch(actions.searchNote(query)),\n}\n}\n\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n",["47","48"],"D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\reportWebVitals.js",[],"D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\store\\reducer\\reducer.js",[],"D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\Components\\Home.js",["49","50","51","52","53"],"import React, { Fragment, useEffect, useState } from 'react';\nimport Masonry from 'react-masonry-css';\nimport TakeNote from './TakeNote';\nimport * as actions from '../store/action/actions'\nimport {connect} from 'react-redux';\nimport pinIcon from '../assets/pin.png'\n\nconst Home = (props) => {\n\n const [editMode,setEditMode] = useState(false)\n\n const [ednote,setNote]=useState({})\n const [visible,setVisible] = useState(false)\n let notesList =null\n let searchResultList= null\n let pinnedNotesList = null\nlet hedis= {marginInlineStart : '40px',display: 'none'};\nlet lindis = {\n          height: 2,\n  width: '70%',\n  display: 'none'\n}\n\nconst setVisibleHandler=()=>{\n \n  setVisible(prevState=>{\n    return{visible : !prevState.visible}\n  })\n}\n\n\nconst inputChangedHandler=(event,identifier)=>\n{\n\n if(identifier==='title')\n {\n  setNote(prevState=>{\n\n    return{\n       ...prevState,\n       title: event.target.value\n\n    }\n    \n  })\n  \n }\n if(identifier==='text')\n {\n  console.log(ednote,\"ednote\")\n     setNote(prevState=>{\n       return{\n          ...prevState,\n          noteText: event.target.value\n\n       }\n     })\n   \n }\n \n\n}\n\n\n const editHandler =(noteId)=>{\n   setEditMode(true)\n    props.onEditHandler(noteId)\n }\n\n const finishEditHandler=()=>{\n   setEditMode(false)\n   props.onFinishEdit(ednote)\n }\n\n\nif(props.pinnedNotes && props.pinnedNotes.length>0){\n  pinnedNotesList =  props.pinnedNotes.map(note=>{\n  hedis= {marginInlineStart : '40px',display: 'block'}\n  lindis = {\n    height: 2,\nwidth: '70%',\ndisplay: 'block'\n}\n    return (<li key={note.id} className=\"list-item\" >\n    <span onClick={()=>props.onRemovePinNote(note.id)} className=\"span1\">{note.title}<button className=\"pin-button\" ><img className=\"pin\" src={pinIcon}/></button></span> \n    <span className=\"span2\">{note.noteText}</span> \n\n  \n    </li>)\n  })\n\n\n}\nif(props.notes && props.notes.length>0){\n  notesList =  props.notes.map(note=>{\n    return (<li key={note.id} className=\"list-item\" >\n    <span onClick={()=>props.onPinNote(note.id)} className=\"span1\">{note.title}<button className=\"pin-button\" ><img className=\"pin\" src={pinIcon}/></button></span> \n    <span className=\"span2\">{note.noteText}</span> \n    <button className=\"list-button\" onClick={()=>editHandler(note.id)}>Edit</button>\n    <button className=\"list-button\" onClick={()=>props.onDeleteNote(note.id)} >Delete</button>\n    <button onClick={()=>props.onAddToArchieve(note)} className=\"list-button\" >Archieve</button>\n    </li>)\n  })\n}\n\nif(props.searchResult && props.searchResult.length>0){\n  console.log(props.searchResult)\n  searchResultList =  props.searchResult.map(note=>{\n    return (<li key={note.id} className=\"list-item\" >\n    <span onClick={()=>props.onPinNote(note.id)} className=\"span1\">{note.title}<button className=\"pin-button\" ><img className=\"pin\" src={pinIcon}/></button></span> \n    <span className=\"span2\">{note.noteText}</span> \n    <button className=\"list-button\" onClick={()=>editHandler(note.id)}>Edit</button>\n    <button className=\"list-button\" onClick={()=>props.onDeleteNote(note.id)} >Delete</button>\n   \n    </li>)\n  })\n}\n\nlet editComp = null\nif(editMode)\n{\n  editComp =   <div className=\"popup\" style={ {display: 'flex'}}>\n  <p className=\"text\" >\n    <span className=\"edit-title\">\n      <input onChange={(e)=>inputChangedHandler(e,'title')} defaultValue={ednote.title}\n     /> \n       <button ><img className=\"pin\" src=\"../assests/push-pin.png\"/>\n       </button></span>\n    <input onChange={(e)=>inputChangedHandler(e,'text')} defaultValue={ednote.noteText}  className=\"edit-input\" />\n    <button onClick={finishEditHandler} className=\"close\">close</button>\n    <button onClick={e=>props.onDeleteNote(props.editedNode.id)} className=\"delete\">delete</button>\n  </p>\n</div>\n\n}\n\n \n   if(searchResultList){\n        return (\n          <Fragment>\n             {editComp}\n          <Masonry\n          breakpointCols={4}\n          style={ {marginTop: '10px'}}\n          className=\"my-masonry-grid\"\n          columnClassName=\"my-masonry-grid_column\">\n          \n          {searchResultList}\n         </Masonry>\n         </Fragment>\n          )\n     } \n      \n    return(\n \n     \n      <Fragment>\n        \n        <TakeNote visible={visible} clicked = {setVisibleHandler} addNote={props.onNoteAdd}/>\n       {editComp}\n           <ul >\n             \n           <h3  style={hedis} >Pinned Notes</h3>\n          <Masonry\n            breakpointCols={4}\n            style={ {marginTop: '10px'}}\n            className=\"my-masonry-grid\"\n            columnClassName=\"my-masonry-grid_column\">\n            \n           {pinnedNotesList}\n           </Masonry>\n        </ul>\n        <hr\n        style={lindis}\n    />\n        <ul>\n          <Masonry\n            breakpointCols={4}\n            className=\"my-masonry-grid\"\n            columnClassName=\"my-masonry-grid_column\">\n           {notesList}\n       \n          </Masonry>\n        </ul>\n      \n        </Fragment>\n     \n    );\n} \n\nconst mapStateToProps=(state)=>{\n\n  return {notes : state.notes,\n    editedNode: state.editedNode,\n    pinnedNotes: state.pin,\n  searchResult: state.searchResult}\n}\nconst mapDispatchToProps=(dispatch)=>{\n\n  return {\n    onDeleteNote: (noteId)=>dispatch(actions.deleteNote(noteId)),\n    onNoteAdd : (note)=> dispatch(actions.addNote(note)),\n    onEditHandler: (noteId) => dispatch(actions.editHandler(noteId)),\n    onFinishEdit: (note) => dispatch(actions.finishEdit(note)),\n    onAddToArchieve:(note)=>dispatch(actions.addToArchieve(note)),\n    onPinNote: (noteId)=>dispatch(actions.pinNote(noteId)),\n    onRemovePinNote: (noteId=>dispatch(actions.removePinNote(noteId))),\n    \n  }\n\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\Components\\Trash.js",[],"D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\store\\action\\actionTypes.js",[],"D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\Components\\TakeNote.js",["54","55"],"D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\store\\action\\actions.js",[],"D:\\Work\\Projects\\Gkeep clone\\google keep clone\\src\\Components\\archieve.js",[],{"ruleId":"56","severity":1,"message":"57","line":8,"column":20,"nodeType":"58","messageId":"59","endLine":8,"endColumn":26},{"ruleId":"60","severity":1,"message":"61","line":30,"column":11,"nodeType":"62","endLine":30,"endColumn":29},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"56","severity":1,"message":"67","line":1,"column":27,"nodeType":"58","messageId":"59","endLine":1,"endColumn":36},{"ruleId":"60","severity":1,"message":"61","line":85,"column":118,"nodeType":"62","endLine":85,"endColumn":154},{"ruleId":"60","severity":1,"message":"61","line":97,"column":112,"nodeType":"62","endLine":97,"endColumn":148},{"ruleId":"60","severity":1,"message":"61","line":110,"column":112,"nodeType":"62","endLine":110,"endColumn":148},{"ruleId":"60","severity":1,"message":"61","line":127,"column":17,"nodeType":"62","endLine":127,"endColumn":69},{"ruleId":"56","severity":1,"message":"67","line":1,"column":15,"nodeType":"58","messageId":"59","endLine":1,"endColumn":24},{"ruleId":"56","severity":1,"message":"68","line":39,"column":15,"nodeType":"58","messageId":"59","endLine":39,"endColumn":19},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["69"],"no-negated-in-lhs",["70"],"'useEffect' is defined but never used.","'text' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]